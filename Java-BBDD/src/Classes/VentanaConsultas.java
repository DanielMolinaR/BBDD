/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Classes;

import java.sql.*;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author cgpc2
 */
public class VentanaConsultas extends javax.swing.JFrame {

    /**
     * Creates new form VentanaConsultas
     */
    VentanaUsuarios principal;

    public VentanaConsultas(VentanaUsuarios vu) {
        initComponents();
        this.setResizable(false);
        principal = vu;
        JLabelUsuarioConectado.setText("Usuario: " + principal.getUser().toUpperCase());
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanelVentanaConsultas = new java.awt.Panel();
        JLabelUsuarioConectado = new javax.swing.JLabel();
        JLabelConsultas = new javax.swing.JLabel();
        JButtonConsultar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableVisualizacionConsultas = new javax.swing.JTable();
        JSpinnerConsultas = new javax.swing.JSpinner();
        JButtonAyudaConsultas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BBDD Tienda");
        setBackground(new java.awt.Color(204, 204, 204));

        JPanelVentanaConsultas.setBackground(new java.awt.Color(153, 153, 153));

        JLabelUsuarioConectado.setForeground(new java.awt.Color(0, 0, 0));
        JLabelUsuarioConectado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        JLabelConsultas.setForeground(new java.awt.Color(0, 0, 0));
        JLabelConsultas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLabelConsultas.setText("CONSULTAS");

        JButtonConsultar.setText("CONSULTAR");
        JButtonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonConsultarActionPerformed(evt);
            }
        });

        JTableVisualizacionConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(JTableVisualizacionConsultas);

        JSpinnerConsultas.setModel(new javax.swing.SpinnerListModel(new String[] {"1-. Codigo y precio productos", "2-. Trabajadores tienda (reponedores y cajeros)", "3-. Reponedores que trabajan mas de 20 horas semanales", "4-. Total facturado desde la implementacion de la BBDD", "5-. Cupones de clientes y sus respectivos productos", "6-. 5 productos sobre los cuales los socios disponen de cupones", "7-. Grado de satisfaccion medio socios", "8-. Numero de tickets emitido por cada tienda", "9-. Numero de trabajadores de cada tienda", "10-. Empleado con la mejor puntuacion", "11-. Trabajadores en ciudades que empiezan por M", "12-. Email del socio que mas saldo ha acumulado", "13-. Producto que mas veces se ha devuelto", "14-. Cajero que mas tickets ha emitido", "15-. Socio con mejor opinion", "16-. Tickets de trabajadores que empiezan por A y ciudad empieza por M", "17-. Tickets emitidos por Alcala y sus respectivos cajeros"}));

        JButtonAyudaConsultas.setText("CONSULTAS");
        JButtonAyudaConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JButtonAyudaConsultasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPanelVentanaConsultasLayout = new javax.swing.GroupLayout(JPanelVentanaConsultas);
        JPanelVentanaConsultas.setLayout(JPanelVentanaConsultasLayout);
        JPanelVentanaConsultasLayout.setHorizontalGroup(
            JPanelVentanaConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                .addGroup(JPanelVentanaConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(JButtonAyudaConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(JSpinnerConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                        .addGap(405, 405, 405)
                        .addComponent(JButtonConsultar))
                    .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                        .addGap(366, 366, 366)
                        .addComponent(JLabelUsuarioConectado, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(211, Short.MAX_VALUE))
            .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                .addGroup(JPanelVentanaConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                        .addGap(388, 388, 388)
                        .addComponent(JLabelConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        JPanelVentanaConsultasLayout.setVerticalGroup(
            JPanelVentanaConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelVentanaConsultasLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(JLabelUsuarioConectado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(JLabelConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(JPanelVentanaConsultasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JSpinnerConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JButtonAyudaConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(JButtonConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanelVentanaConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanelVentanaConsultas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JButtonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonConsultarActionPerformed
        String decisionConsulta = (String) JSpinnerConsultas.getValue();

        ArrayList <String> parametros;
        ArrayList<String> secciones;

        ArrayList <String> lista_consultas; 
        AlmacenarConsultas(lista_consultas);

        try {
            stmt = GestorBasesDeDatos.getConnection().createStatement();

            switch (decisionConsulta) {
                case "1-. Codigo y precio productos":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Codigo");
                    model.addColumn("Precio_Sin_IVA");

                    while (rs.next()) {
                        String codigo = rs.getString("codigo");
                        String p_sin_iva = rs.getString("p_sin_iva");
                        String[] row = new String[]{codigo, p_sin_iva};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "2-. Trabajadores tienda (reponedores y cajeros)":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("Trabajadores");

                    while (rs.next()) {
                        String trabajador = rs.getString("nombre");
                        String[] row = new String[]{trabajador};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "3-. Reponedores que trabajan mas de 20 horas semanales":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("Nombre");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String[] row = new String[]{nombre};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "4-. Total facturado desde la implementacion de la BBDD":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("Total facturado");

                    while (rs.next()) {
                        String nombre = rs.getString("total_facturado");
                        String[] row = new String[]{nombre};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "5-. Cupones de clientes y sus respectivos productos":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("N_socio");
                    model.addColumn("Nombre");
                    model.addColumn("Id_cupon");
                    model.addColumn("Descuento");
                    model.addColumn("Codigo");

                    while (rs.next()) {
                        String n_socio = rs.getString("n_socio");
                        String nombre = rs.getString("nombre");
                        String id_cupon = rs.getString("id_cupon");
                        String descuento = rs.getString("porcentaje_descuento");
                        String codigo_producto = rs.getString("codigo_producto");
                        String[] row = new String[]{n_socio, nombre, id_cupon, descuento, codigo_producto};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "6-. 5 productos sobre los cuales los socios disponen de cupones":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("Codigo");

                    while (rs.next()) {
                        String codigo = rs.getString("codigo");
                        String[] row = new String[]{codigo};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "7-. Grado de satisfaccion medio socios":

                    rs = stmt.executeQuery(consulta);
                    model.addColumn("Puntuacion media");

                    while (rs.next()) {
                        String media_socios = rs.getString("Media_Socios");
                        String[] row = new String[]{media_socios};
                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "8-. Numero de tickets emitido por cada tienda":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Ciudad");
                    model.addColumn("Barrio");
                    model.addColumn("Nombre");
                    model.addColumn("Id_ticket");

                    while (rs.next()) {
                        String ciudad = rs.getString("ciudad");
                        String barrio = rs.getString("barrio");
                        String nombre = rs.getString("nombre");
                        String id_ticket = rs.getString("contador");
                        String[] row = new String[]{ciudad, barrio, nombre, id_ticket};

                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "9-. Numero de trabajadores de cada tienda":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Ciudad");
                    model.addColumn("Barrio");
                    model.addColumn("NSS");

                    while (rs.next()) {
                        String ciudad = rs.getString("ciudad");
                        String barrio = rs.getString("barrio");
                        String nss = rs.getString("contador");
                        String[] row = new String[]{ciudad, barrio, nss};

                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "10-. Empleado con la mejor puntuacion":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");
                    model.addColumn("Telefono Fijo");
                    model.addColumn("Telefono Movil");
                    model.addColumn("Nota Media");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String tf = rs.getString("tlfno_fijo");
                        String tm = rs.getString("tlfno_movil");
                        String nota_media = rs.getString("nota_media");
                        String[] row = new String[]{nombre, tf, tm, nota_media};

                        model.addRow(row);
                    }
                    rs.close();
                    break;

                case "11-. Trabajadores en ciudades que empiezan por M":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String[] row = new String[]{nombre};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                case "12-. Email del socio que mas saldo ha acumulado":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");
                    model.addColumn("Email");
                    model.addColumn("Saldo");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String email = rs.getString("email");
                        String saldo = rs.getString("saldo");
                        String[] row = new String[]{nombre, email, saldo};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                
                case "13-. Producto que mas veces se ha devuelto":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Codigo");
                    model.addColumn("Veces devuelto");

                    while (rs.next()) {
                        String codigo = rs.getString("codigo_producto");
                        String contador = rs.getString("cuantas_veces_devuelto");
                        String[] row = new String[]{codigo, contador};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                
                case "14-. Cajero que mas tickets ha emitido":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");
                    model.addColumn("Tickets");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String n_tickets = rs.getString("n_tickets");
                        String[] row = new String[]{nombre, n_tickets};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                
                case "15-. Socio con mejor opinion":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");
                    model.addColumn("Puntuacion");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String puntuacion = rs.getString("puntuacion");
                        String[] row = new String[]{nombre, puntuacion};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                 
                case "16-. Tickets de trabajadores que empiezan por A y ciudad empieza por M":

                    rs = stmt.executeQuery(consulta);

                    model.addColumn("Nombre");
                    model.addColumn("ID_Ticket");
                    model.addColumn("Ciudad");

                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String id_ticket = rs.getString("id_ticket");
                        String ciudad = rs.getString("ciudad");
                   
                        String[] row = new String[]{nombre, id_ticket, ciudad};

                        model.addRow(row);
                    }
                    rs.close();
                    break;
                
                case "17-. Tickets emitidos por Alcala y sus respectivos cajeros":

                    secciones.removeAll(secciones);
                    secciones.add("Nombre");
                    secciones.add("ID_Ticket");


                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        String id_ticket = rs.getString("id_ticket");
                   
                        String[] row = new String[]{nombre, id_ticket};

                        model.addRow(row);
                    }
                    break;
            }

            stmt.close();

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
        
    }//GEN-LAST:event_JButtonConsultarActionPerformed

    public void CrearTabla(ArrayList<String> lista_consultas, ArrayList<String> parametros, ArrayList<String> secciones, int numero_consulta){
        Statement stmt;
        ResultSet rs;

        DefaultTableModel model = (DefaultTableModel) JTableVisualizacionConsultas.getModel();

        model.setRowCount(0);
        model.setColumnCount(0);

        rs = stmt.executeQuery(lista_consultas.get(numero_consulta-1));

        GenerarParametros(model, parametros, secciones);

    }

    public void GenerarParametros(DefaultTableModel model, ArrayList<String> parametros, ArrayList<String> secciones){
        for (String seccion : secciones){
            model.addColumn(seccion);
        }
    }

    public void AlmacenarConsultas(ArrayList <String> lista_consultas){
        lista_consultas.add("select codigo, p_sin_iva from producto");
        lista_consultas.add("select (case when n_horas is null then concat (nombre, ' (Cajero)') else concat (nombre, ' (Reponedor)') end) as nombre from trabajador left join reponedor on reponedor.nss_trabajador = trabajador.nss");
        lista_consultas.add("select nombre from trabajador, reponedor where trabajador.nss = reponedor.nss_trabajador and n_horas>20");
        lista_consultas.add("select sum(precio) as total_facturado from ticket");
        lista_consultas.add("select n_socio, nombre, id_cupon, concat (descuento, ' (%)') as porcentaje_descuento, codigo_producto from socio, genera_cupon, cupon where socio.n_socio=genera_cupon.n_socio_socio and genera_cupon.id_cupon_cupon=cupon.id_cupon order by n_socio");
        lista_consultas.add("select codigo from producto where codigo in (select codigo_producto from cupon) order by codigo");
        lista_consultas.add("select avg(puntuacion) as Media_Socios from opinion");
        lista_consultas.add("select distinct ciudad, barrio, nombre, count(id_ticket) as contador from tienda, trabajador, cajero, ticket where tienda.id_tienda=trabajador.id_tienda_tienda and trabajador.nss = cajero.nss_trabajador and cajero.nss_trabajador=ticket.nss_trabajador_cajero group by ciudad, barrio, nombre order by count(id_ticket) desc");
        lista_consultas.add("select ciudad, barrio, count(nss) as contador from tienda inner join trabajador on tienda.id_tienda=trabajador.id_tienda_tienda group by ciudad, barrio order by count(nss) asc");
        lista_consultas.add("select nombre, tlfno_fijo, tlfno_movil, nota_media from trabajador where nota_media in (select max(nota_media) from trabajador)");
        lista_consultas.add("select nombre from trabajador inner join tienda on tienda.id_tienda=trabajador.id_tienda_tienda and ciudad like 'M%' order by nombre asc");
        lista_consultas.add("select nombre, email, saldo from socio where saldo in (select max(saldo) from socio)");
        lista_consultas.add("select codigo_producto, count(codigo_producto) as cuantas_veces_devuelto from devuelve_producto group by codigo_producto order by count(codigo_producto) desc limit 1");
        lista_consultas.add("select nombre, count(id_ticket) as n_tickets from trabajador, cajero, ticket where trabajador.nss=cajero.nss_trabajador and ticket.nss_trabajador_cajero=cajero.nss_trabajador group by nombre order by count(id_ticket) desc limit 1");
        lista_consultas.add("select nombre, puntuacion from socio, opinion where opinion.n_socio_socio=socio.n_socio and puntuacion in (select max(puntuacion) from opinion)");
        lista_consultas.add("select nombre, id_ticket, ciudad from ticket, cajero, trabajador, tienda where trabajador.nss=cajero.nss_trabajador and ticket.nss_trabajador_cajero=cajero.nss_trabajador and tienda.id_tienda = trabajador.id_tienda_tienda and nombre like 'A%' and ciudad like 'M%'");
        lista_consultas.add("select nombre, id_ticket from ticket, cajero, trabajador, tienda where trabajador.nss=cajero.nss_trabajador and ticket.nss_trabajador_cajero=cajero.nss_trabajador and trabajador.id_tienda_tienda = tienda.id_tienda and ciudad like 'Alcala de Henares'");
        
    }

        /*1-. Codigo y precio productos
        2-. Trabajadores tienda (reponedores y cajeros)
        3-. Reponedores que trabajan mas de 20 horas semanales
        4-. Total facturado desde la implementacion de la BBDD
        5-. Cupones de clientes y sus respectivos productos
        6-. 5 productos sobre los cuales los socios disponen de cupones
        7-. Grado de satisfaccion medio socios
        8-. Numero de tickets emitido por cada tienda
        9-. Numero de trabajadores de cada tienda
        10-. Empleado con la mejor puntuacion
        11-. Trabajadores en ciudades que empiezan por M
        12-. Email del socio que mas saldo ha acumulado
        13-. Producto que mas veces se ha devuelto
        14-. Cajero que mas tickets ha emitido
        15-. Socio con mejor opinion
        16-. Tickets de trabajadores que empiezan por A y ciudad empieza por M
        17-. Tickets emitidos por Alcala y sus respectivos cajeros*/

    private void JButtonAyudaConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JButtonAyudaConsultasActionPerformed
        JOptionPane.showMessageDialog(null, "        1-. Codigo y precio productos\n"
                + "        2-. Trabajadores tienda (reponedores y cajeros)\n"
                + "        3-. Reponedores que trabajan mas de 20 horas semanales\n"
                + "        4-. Total facturado desde la implementacion de la BBDD\n"
                + "        5-. Cupones de clientes y sus respectivos productos\n"
                + "        6-. 5 productos sobre los cuales los socios disponen de cupones\n"
                + "        7-. Grado de satisfaccion medio socios\n"
                + "        8-. Numero de tickets emitido por cada tienda\n"
                + "        9-. Numero de trabajadores de cada tienda\n"
                + "        10-. Empleado con la mejor puntuacion\n"
                + "        11-. Trabajadores en ciudades que empiezan por M\n"
                + "        12-. Email del socio que mas saldo ha acumulado\n"
                + "        13-. Producto que mas veces se ha devuelto\n"
                + "        14-. Cajero que mas tickets ha emitido\n"
                + "        15-. Socio con mejor opinion\n"
                + "        16-. Tickets de trabajadores que empiezan por A y ciudad empieza por M\n"
                + "        17-. Tickets emitidos por Alcala y sus respectivos cajeros");
    }//GEN-LAST:event_JButtonAyudaConsultasActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
        GestorBasesDeDatos.disconnect();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JButtonAyudaConsultas;
    private javax.swing.JButton JButtonConsultar;
    private javax.swing.JLabel JLabelConsultas;
    private javax.swing.JLabel JLabelUsuarioConectado;
    private java.awt.Panel JPanelVentanaConsultas;
    private javax.swing.JSpinner JSpinnerConsultas;
    private javax.swing.JTable JTableVisualizacionConsultas;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
